// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:task/config.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static AppConfig config = AppConfig.instance;

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'AIzaSyATzOY44S-OyK1tCR-ugGj9hUua-DUMbPY',
    appId: '1:771744917375:web:bb434e0f9a24ddbb7f9c4a',
    messagingSenderId: '771744917375',
    projectId: 'mubashar-task',
    authDomain: 'mubashar-task.firebaseapp.com',
    storageBucket: 'mubashar-task.appspot.com',
  );

  static FirebaseOptions android = FirebaseOptions(
    apiKey: config.androidConfig.apiKey,
    appId: config.androidConfig.appId,
    messagingSenderId: config.androidConfig.messagingSenderId,
    projectId: config.androidConfig.projectId,
    storageBucket: config.androidConfig.storageBucket,
  );

  static FirebaseOptions ios = FirebaseOptions(
    apiKey: config.iosConfig.apiKey,
    appId: config.iosConfig.appId,
    messagingSenderId: config.iosConfig.messagingSenderId,
    projectId: config.iosConfig.projectId,
    storageBucket: config.iosConfig.storageBucket,
    iosBundleId: config.iosConfig.iosBundleId,
  );

  static FirebaseOptions macos = FirebaseOptions(
    apiKey: config.macosConfig.apiKey,
    appId: config.macosConfig.appId,
    messagingSenderId: config.macosConfig.messagingSenderId,
    projectId: config.macosConfig.projectId,
    storageBucket: config.macosConfig.storageBucket,
    iosBundleId: config.macosConfig.iosBundleId,
  );

  static FirebaseOptions windows = FirebaseOptions(
    apiKey: config.windowsConfig.apiKey,
    appId: config.windowsConfig.appId,
    messagingSenderId: config.windowsConfig.messagingSenderId,
    projectId: config.windowsConfig.projectId,
    authDomain: config.windowsConfig.authDomain,
    storageBucket: config.windowsConfig.storageBucket,
  );
}
